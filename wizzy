#! /usr/bin/env python
import sys,os, errno,glob,shutil
from random import choice
import subprocess
import re


program_name = "wizzy"
program_directory = "." + program_name
config_directory = "config"
config_filename=".wizzy-config"
script_name=program_name
command_names = ['install','fix','clear','ignore','help', 'track', 'untrack' ,'example']

words_with_semicolumn =	{
	'username': 'username_example',
	'password': 'password_example', 
	'host':	'host.example.net',
	'zmi_http_username': 'username',
	'zmi_http_password': 'password',
	'zmi_server_address': 'server.example.net',
	'zmi_server_port': '1234',
	'home_pages_index_location': '/path/to/hp/index',
	'home_pages_root_url': "http://teacher.example.net/",
	'click_to_dial_root_url': "http://voip.example.net/click2dial/",
	'images_root_url': "http://example.net/pictures",
	'myphone_edit_photo_address': "http://www.myphone.example.net/?a=0",
	'myphone_address': "http://myphone.example.net/",
	'receipt_pages_path': "/ricevimento",
	'contacts_url': "http://www.example.com/path/to/contacts",
	'search_url': "http://www.example.com/search",
	'mydesk_url': "http://www.example.com/mydesk",
	'helpdesk_email': "helpdesk@example.com",
	'google_maps_link': "http://maps.google.it/maps?f=q&source=s_q&hl=it&geocode=",
	'privacy_link': "http://www.example.com/office/privacy",
	'urp_email': "urp@example.com",
	'urp_url': "http://www.example.com/contact",
	'pec_email': "ateneo@pec.example.com",
	'pec_url': "http://www.example.com/pec",
	':subject': "Subject Example",
	':from': "example@example.it",
	':settings': 'example',
	':smtp_address': 'smtp.unife.it',
	':smtp_port': '25'
  }

words_with_equal_sign = {
	'host' : 'example.example.it'
}


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    PURPLE = '\033[35m'
    WARNING = '\033[93m'
    CYAN = '\033[36m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def getRandomMagicWord():
	words = [
		"Aajaye",
		"Abracadabra",
		"Alla Peanut Butter Sandwiches",
		"Alakazam",
		"Cei",
		"Hocus pocus",
		"Joshikazam",
		"Klaatu barada nikto",
		"Meeska, Mooska, Mickey Mouse",
		"Open sesame",
		"Hey Presto",
		"Sim Sala Bim",
		"Shazam",
		"Izzy wizzy",
		"Wella Walla Washington",
		"Mecca lecca hi, mecca hiney ho"]
	return choice(words)

def getStartMessage():
	return bcolors.OKBLUE + "Wizzy:"+ getRandomMagicWord().title() +"! "+ bcolors.ENDC 

def getFailMessage(msg):
	return bcolors.FAIL + msg + bcolors.ENDC 

def getInfoMessage(msg):
	return bcolors.CYAN + msg + bcolors.ENDC 

def getMagicMessage(msg):
	return bcolors.OKGREEN + msg + " !!"+ bcolors.ENDC 

def help():
	print """
 """ + getInfoMessage("usage: "+ program_name + " <spell>" ) + """

Shhhh! Here you can find the list of the spells :

   """+getInfoMessage(command_names[0])+"""        Install wizzy and caches all files specified in the """+config_filename+"""
   """+getInfoMessage(command_names[1])+"""            Restores the cached files .. like .. magic ! 
   """+getInfoMessage(command_names[2])+"""          Empties the wizzy cache. You need to reinstall after
   """+getInfoMessage(command_names[3])+"""         Add the wizzy files to .gitignore
   """+getInfoMessage(command_names[4])+"""           Every magician needs help at first     
  """


def getListOfFilesToCache():
	#from .wizzy-config
	l = list()
	f = open(config_filename, 'r')
	for line in f:
	    l.append(line.rstrip('\r\n'))
	return l

def isModified(f):
	if not os.path.exists(os.path.abspath(f)) :
		# file removed?
		return True
	if os.stat(f).st_mtime == os.stat(os.path.abspath(program_directory)+"/"+os.path.basename(f)).st_mtime :
		return False
	else :
		return True

def ignore():
	# Adding files to .gitignore
	if not "."+program_name in open(".gitignore").read():
		# must add to .gitignore
		f = open(".gitignore",'a')
		f.write(str("#  Ignore "+program_name+" configuration \n"))
		f.write(str("."+program_name+"\n"))
		f.write(str(script_name+"\n"))
		f.write(str(config_filename+"\n"))
	else :
		# already added
		pass
	print getStartMessage() + getInfoMessage(" .. and only wizards can see "+program_name+ " files now! ")
def install():
	print getStartMessage()+ getInfoMessage("Making "+program_name+ " directory..")
	# Create wizzy cache directory
	try:
	    os.makedirs(program_directory)
	except OSError, e:
	    if e.errno != errno.EEXIST:
	    	# If is not a already exists error
		    raise
  
    # Fill wizzy dir with files specified in .wizzy-config
	print getStartMessage()
	for element in  getListOfFilesToCache():
		if  not glob.glob(os.path.abspath(element)):
			#The file(s) are in the .wizzy-config but not on the os !
			print getStartMessage()+getFailMessage(" Oh snap! Someone made "+element+" disappear! Can you check the "+config_filename+" for missing files?")
		for files in glob.glob(os.path.abspath(element)):
			print getInfoMessage("	Caching "+files+ " ..")
			shutil.copy2(files, os.path.abspath(program_directory))

def fix():
	if os.listdir(program_directory):
		print getStartMessage()
		for element in  getListOfFilesToCache():
			for files in glob.glob(os.path.abspath(element)):
				# if the file is modified since last magic, copy the cached version
				if isModified(files) :
					if os.path.exists(files):
						# Override file
						os.remove(files)
					shutil.copy2(program_directory+"/"+os.path.basename(files), os.path.dirname(files))
					print getInfoMessage("	"+files+"? ")+getMagicMessage(getRandomMagicWord())
				else :
					print getInfoMessage("	"+files+"? ")+getFailMessage("No magic needed here..") 
		install()		
	else:
		print getStartMessage()+ getFailMessage("No cache found ! Have you tried to install "+ program_name + "?!\n Try with '" + program_name + " install'. ")

def clear():
	try:
		for files in os.listdir(program_directory):
			os.remove(os.path.abspath(program_directory +"/"+files))
		print getStartMessage()+getInfoMessage(" All "+program_name+" files? PUFF..") 
	except OSError, e:
		print getStartMessage()+getFailMessage(" Oh snap! My magic wand is probably broken .. ") 
		raise

def untrack():
	for element in  getListOfFilesToCache():
		for files in glob.glob(os.path.abspath(element)):
			command = 'git update-index --assume-unchanged ' + files
			child = subprocess.Popen(command, shell=True, stderr=subprocess.PIPE)
			while True:
				out = child.stderr.read(1)
				if out == '' and child.poll() != None:
					break
				if out != '':
					sys.stdout.write(out)
					sys.stdout.flush()

def track():
	for element in  getListOfFilesToCache():
		for files in glob.glob(os.path.abspath(element)):
			command = 'git update-index --no-assume-unchanged ' + files
			child = subprocess.Popen(command, shell=True, stderr=subprocess.PIPE)
			while True:
				out = child.stderr.read(1)
				if out == '' and child.poll() != None:
					break
				if out != '':
					sys.stdout.write(out)
					sys.stdout.flush()

def example():
	for element in  getListOfFilesToCache():
		for files in glob.glob(os.path.abspath(element)):
			f = open(files, 'r')
			originalstring = f.read()
			f.close()
			f = open(files, 'w')
			for word in words_with_semicolumn:
				# try with : and =
				regex = re.compile(word +": [\w.]*")
				originalstring = regex.sub(word + ": "+words_with_semicolumn[word], originalstring)
			f.write(originalstring)
			f.close()
	for element in  getListOfFilesToCache():
		for files in glob.glob(os.path.abspath(element)):
			f = open(files, 'r')
			originalstring = f.read()
			f.close()
			f = open(files, 'w')
			for word in words_with_equal_sign:
				# try with : and =
				regex = re.compile(word +" = [a-zA-Z0-9\-\.]*")
				originalstring = regex.sub(word + " = "+words_with_equal_sign[word], originalstring)
			f.write(originalstring)
			f.close()



def exec_arg(argv):
	if len(argv) == 2:
		# check if the command is supported
		if not argv[1] in command_names:
			# not supported
			print getStartMessage()+ getFailMessage("You're using the wrong spell.. See '" + program_name + " help'. ") 
		else:
			# calling the command
			globals()[argv[1]]()
	else :
		# wrong arguments man
		print getStartMessage()+ getFailMessage("You're using the wrong spell.. See '" + program_name + " help'. ")

exec_arg(sys.argv)
